{"version":3,"file":null,"sources":["../src/api.js","../src/request/paramify.js","../src/request/jsonp.js","../src/yourls-db.js","../src/yourls-url.js","../src/yourls.js"],"sourcesContent":["/*\n * Copyright (C) 2016 Alasdair Mercer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * The singleton {@link API} instance which is privatized to prevent leaking credentials.\n *\n * @private\n * @type {API}\n */\nvar instance = null\n\n/**\n * Sanitizes the specified <code>credentials</code> by ensuring that only valid properties are present and only when\n * appropriate.\n *\n * This function does not modify <code>credentials</code> and instead creates a new object with the sanitized\n * properties.\n *\n * @param {API~Credentials} credentials - the credentials to be sanitized (may be <code>null</code>)\n * @return {API~Credentials} A sanitized version of <code>credentials</code> or <code>null</code> if\n * <code>credentials</code> is <code>null</code>.\n * @private\n */\nfunction sanitizeCredentials(credentials) {\n  if (!credentials) {\n    return null\n  }\n\n  var result = {}\n  if (credentials.signature) {\n    result.signature = credentials.signature\n    result.timestamp = credentials.timestamp\n  } else {\n    result.password = credentials.password\n    result.username = credentials.username\n  }\n\n  return result\n}\n\n/**\n * Contains information on how to connect to and authenticate with a YOURLS server.\n *\n * @param {string} [url=''] - the URL for the YOURLS server\n * @param {API~Credentials} [credentials] - the credentials to be used to authenticate with the YOURLS API (may be\n * <code>null</code>)\n * @protected\n * @constructor\n */\nexport function API(url, credentials) {\n  /**\n   * The URL of the YOURLS server.\n   *\n   * @public\n   * @type {string}\n   */\n  this.url = url ? url.replace(/\\/$/, '') : ''\n  /**\n   * The credentials to be used to authenticate with the YOURLS API.\n   *\n   * This may be <code>null</code> if the YOURLS API is public.\n   *\n   * @public\n   * @type {API~Credentials}\n   */\n  this.credentials = sanitizeCredentials(credentials)\n}\n\n/**\n * Destroys the singleton instance of {@link API}.\n *\n * @return {void}\n * @public\n * @static\n */\nAPI.clear = function() {\n  instance = null\n}\n\n/**\n * Retrieves the singleton instance of {@link API}.\n *\n * This function will return <code>null</code> unless an instance is currently stored.\n *\n * @return {API} The connected {@link API} or <code>null</code> if none exists.\n * @public\n * @static\n */\nAPI.fetch = function() {\n  return instance\n}\n\n/**\n * Stores this {@link API} as the singleton, potentially replacing the existing instance.\n *\n * @return {void}\n * @public\n */\nAPI.prototype.store = function() {\n  instance = this\n}\n\n/**\n * The credentials to be used to authenticate with a private YOURLS API.\n *\n * Authentication can be done with a traditional username and password combination <b>or</b> by using the secret\n * signature token (e.g. <code>1002a612b4</code>)for the YOURLS API. The latter is not available for public YOURLS APIs\n * and can be found on the \"Tools\" page.\n *\n * Optionally, a timestamp can accompany the signature token to make it time-limited (depending on the server\n * configuration). When a timestamp is provided the signature token <b>must</b> be the md5 sum of the timestamp and\n * signature token concatenated, and in that order.\n *\n * @typedef {Object} API~Credentials\n * @property {string} [password] - The password of the user to be authenticated.\n * @property {string} [username] - The name of the user to be authenticated.\n * @property {string} [signature] - The signature token to be used for passwordless authentication with the YOURLS API.\n * @property {number|string} [timestamp] - The optional timestamp to limit the <code>signature</code> token.\n */\n","/*\n * Copyright (C) 2016 Alasdair Mercer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Creates a serialized representation of the specified <code>params</code> into a URL query string.\n *\n * @param {Object} [params] - the hash of parameter key/value pairs to be serialized\n * @return {string} A URL query string representing <code>params</code>.\n * @protected\n */\nexport function paramify(params) {\n  if (!params) {\n    return ''\n  }\n\n  var results = []\n\n  for (var key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key)) {\n      if (params[key] != null) {\n        results.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))\n      }\n    }\n  }\n\n  return results.join('&')\n}\n","/*\n * Copyright (C) 2016 Alasdair Mercer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { API } from '../api'\nimport { paramify } from './paramify'\n\n/**\n * The key of the callback function holder within the global namespace.\n *\n * @private\n * @type {string}\n */\nvar callbackHolderKey = '__yourls' + Date.now() + '_jsonp'\n/**\n * Contains the callback functions for active JSONP requests.\n *\n * Callback references should be removed immediately once they have been called.\n *\n * Due to the nature of JSON, a reference to this object <b>must</b> be publicly available (i.e. global).\n *\n * @private\n * @type {Object<number, Function>}\n */\nvar callbackHolder = window[callbackHolderKey] = {}\n\n/**\n * Generates a quick and dirty unique ID for a callback.\n *\n * @return {number} The generated callback ID.\n * @private\n */\nfunction generateCallbackId() {\n  var id = Date.now()\n  while (callbackHolder[id]) {\n    id++\n  }\n\n  return id\n}\n\n/**\n * Extracts the values of the properties with the specified <code>names</code> from the <code>response</code> provided\n * and returns them in a single result.\n *\n * If <code>names</code> is a string or only contains a single string, only the value for that named property will be\n * returned. Otherwise, an object containing the key/value pairs for each named property will be returned.\n *\n * If <code>response</code> is <code>null</code> this function will return <code>null</code>.\n *\n * @param {string|string[]} names - the names of the <code>response</code> properties whose values are to be returned as\n * the result\n * @param {Object} response - the YOURLS API response\n * @return {*} The result extracted from <code>response</code>.\n * @private\n */\nfunction getResult(names, response) {\n  names = Object.prototype.toString.call(names) === '[object Array]' ? names : [ names ]\n\n  var i\n  var name\n  var result = null\n\n  if (!response) {\n    return result\n  }\n\n  if (names.length === 1) {\n    result = response[names[0]]\n  } else {\n    result = {}\n\n    for (i = 0; i < names.length; i++) {\n      name = names[i]\n\n      if (typeof response[name] !== 'undefined') {\n        result[name] = response[name]\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Sends a JSONP request to the connected YOURLS API with the <code>data</code> provided which should, in turn, call the\n * specified <code>callback</code> with the result.\n *\n * If the request is successful, <code>callback</code> will be passed the value of the named properties from the\n * response. If <code>resultNames</code> is a string or only contains a single string, only the value for that named\n * property will be passed as the first argument. Otherwise, an object containing the key/value pairs for each named\n * property will be passed as the first argument. The actual response will always be passed as the second argument.\n *\n * Due to the nature of JSONP, all information will be included in the URL of the request. This includes\n * <code>data</code> as well as <b>any credentials</b> used to authenticate with the API. You have been warned.\n *\n * @param {Object} data - the data to be sent\n * @param {string|string[]} resultNames - the names of the response properties whose values are to be passed to\n * <code>callback</code> as the first argument\n * @param {Function} callback - the function to be called with the result\n * @return {void}\n * @protected\n */\nexport function jsonp(data, resultNames, callback) {\n  var api = API.fetch()\n  var id = generateCallbackId()\n  var script = document.createElement('script')\n\n  callbackHolder[id] = function(response) {\n    var result = getResult(resultNames, response)\n\n    delete callbackHolder[id]\n    script.parentNode.removeChild(script)\n\n    callback(result, response)\n  }\n\n  var target = api.url + '?' + paramify({ callback: callbackHolderKey + '[' + id + ']', format: 'jsonp' })\n  if (api.credentials) {\n    target += '&' + paramify(api.credentials)\n  }\n  if (data) {\n    target += '&' + paramify(data)\n  }\n\n  script.setAttribute('src', target)\n  document.getElementsByTagName('head')[0].appendChild(script)\n}\n","/*\n * Copyright (C) 2016 Alasdair Mercer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { jsonp } from './request/jsonp'\n\n/**\n * Provides the ability to lookup information related to the YOURLS database.\n *\n * @constructor\n * @protected\n */\nexport function DB() {\n  // Do nothing\n}\n\n/**\n * Retrieves the statistics for this {@link DB}.\n *\n * @param {Function} callback - the callback function to be called with the result\n * @return {DB} A reference to this {@link DB} for chaining purposes.\n * @public\n */\nDB.prototype.stats = function(callback) {\n  var data = { action: 'db-stats' }\n\n  jsonp(data, 'db-stats', callback)\n\n  return this\n}\n","/*\n * Copyright (C) 2016 Alasdair Mercer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE0\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { jsonp } from './request/jsonp'\n\n/**\n * Provides the ability to lookup information related to the specified shortened <code>url</code>.\n *\n * @param {string} url - the shortened URL (or its keyword) to be used\n * @constructor\n * @protected\n */\nexport function URL(url) {\n  /**\n   * Either the shortened URL or its keyword for this {@link URL}.\n   *\n   * @public\n   * @type {string}\n   */\n  this.url = url\n}\n\n/**\n * Retrieves the original (\"long\") URL for this shortened {@link URL}.\n *\n * @param {Function} callback - the callback function to be called with the result\n * @return {URL} A reference to this {@link URL} for chaining purposes.\n * @public\n */\nURL.prototype.expand = function(callback) {\n  var data = {\n    action: 'expand',\n    shorturl: this.url\n  }\n\n  jsonp(data, [ 'keyword', 'longurl', 'shorturl' ], callback)\n\n  return this\n}\n\n/**\n * Retrieves the statistics for this shortened {@link URL}.\n *\n * @param {Function} callback - the callback function to be called with the result\n * @return {URL} A reference to this {@link URL} for chaining purposes.\n * @public\n */\nURL.prototype.stats = function(callback) {\n  var data = {\n    action: 'url-stats',\n    shorturl: this.url\n  }\n\n  jsonp(data, 'link', callback)\n\n  return this\n}\n","/*\n * Copyright (C) 2016 Alasdair Mercer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { API } from './api'\nimport { DB } from './yourls-db'\nimport { jsonp } from './request/jsonp'\nimport { URL } from './yourls-url'\n\n/**\n * Provides the ability to connect to YOURLS servers and perform read/write operations via the API that they expose.\n *\n * Before attempting to interact with a YOURLS server, you <b>must</b> call {@link YOURLS#connect} first to configure\n * the URL of the YOURLS server and any credentials required to authenticate with its API (only required when private).\n *\n * @constructor\n * @protected\n */\nvar YOURLS = function() {\n  /**\n   * Provides information on the YOURLS {@link DB}.\n   *\n   * @public\n   * @type {DB}\n   */\n  this.db = new DB()\n\n  /**\n   * The current version of <code>yourls</code>.\n   *\n   * This is <b>not</b> the same as the version of YOURLS that is being connected to. The {@link YOURLS#version}\n   * function should be used to provide that information.\n   *\n   * @public\n   * @type {string}\n   */\n  this.VERSION = '2.0.0'\n}\n\n/**\n * Stores the specified information to be used later to connect to and authenticate with a YOURLS server.\n *\n * @param {string} [url=''] - the URL for the YOURLS server\n * @param {API~Credentials} [credentials] - the credentials to be used to authenticate with the YOURLS API (may be\n * <code>null</code>)\n * @return {YOURLS} A reference to this {@link YOURLS} for chaining purposes.\n * @public\n */\nYOURLS.prototype.connect = function(url, credentials) {\n  var api = new API(url, credentials)\n  api.store()\n\n  return this\n}\n\n/**\n * Clears any information that may have been previously stored for connecting to and authenticating with a YOURLS\n * server.\n *\n * @return {YOURLS} A reference to this {@link YOURLS} for chaining purposes.\n * @public\n */\nYOURLS.prototype.disconnect = function() {\n  API.clear()\n\n  return this\n}\n\n/**\n * Creates a short URL for the specified long <code>url</code>.\n *\n * Optionally, a <code>descriptor</code> can be provided to specify a keyword and/or title for the short URL that is to\n * be created. If a keyword is specified, it must be available and, if not, the YOURLS server will generate a unique\n * keyword. If <code>descriptor</code> is a string, it will be treated as a keyword.\n *\n * @param {string} url - the long URL to be shortened\n * @param {YOURLS~Descriptor|string} [descriptor] - the optional descriptor (or keyword, if it's a string) to be used\n * for the short URL\n * @param {Function} callback - the callback function to be called with the result\n * @return {YOURLS} A reference to this {@link YOURLS} for chaining purposes.\n * @public\n */\nYOURLS.prototype.shorten = function(url, descriptor, callback) {\n  var data = {\n    action: 'shorturl',\n    url: url\n  }\n\n  switch (typeof descriptor) {\n  case 'function':\n    callback = descriptor\n    descriptor = null\n    break\n  case 'string':\n    descriptor = { keyword: descriptor }\n    break\n  default:\n    // Do nothing\n  }\n\n  if (descriptor) {\n    data.keyword = descriptor.keyword\n    data.title = descriptor.title\n  }\n\n  jsonp(data, [ 'shorturl', 'title', 'url' ], callback)\n\n  return this\n}\n\n/**\n * Retrieves the statistics for all shortened URLs.\n *\n * Optionally, the results can be filtered and even limited to provide greater control.\n *\n * @param {string} [filter] - the filter to be applied (either <code>\"top\"</code>, <code>\"bottom\"</code>,\n * <code>\"rand\"</code>, or <code>\"last\"</code>) (may be <code>null</code> for all)\n * @param {number} [limit] - the maximum number of URLs to be returned (may be <code>null</code> for all)\n * @param {Function} callback - the callback function to be called with the result\n * @return {YOURLS} A reference to this {@link YOURLS} for chaining purposes.\n * @public\n */\nYOURLS.prototype.stats = function(filter, limit, callback) {\n  var data = { action: 'stats' }\n\n  switch (typeof filter) {\n  case 'number':\n    callback = limit\n    limit = filter\n    filter = null\n    break\n  case 'function':\n    callback = filter\n    filter = limit = null\n    break\n  default:\n    if (typeof limit === 'function') {\n      callback = limit\n      limit = null\n    }\n  }\n\n  data.filter = filter\n  data.limit = limit\n\n  jsonp(data, 'stats', callback)\n\n  return this\n}\n\n/**\n * Creates an instance of {@link URL} for the specified shortened <code>url</code> which can be used to lookup more\n * detailed information relating to it.\n *\n * No data is fetched just by calling this function; one of the functions on the returned instance need to be called for\n * that to happen.\n *\n * @param {string} url - the shortened URL (or its keyword)\n * @return {URL} The {@link URL} created for the shortened <code>url</code> or <code>null</code> if <code>url</code> is\n * <code>null</code>.\n * @public\n */\nYOURLS.prototype.url = function(url) {\n  return url ? new URL(url) : null\n}\n\n/**\n * Retrieves the version of the connected YOURLS API.\n *\n * @param {Function} callback - the callback function to be called with the result\n * @return {YOURLS} A reference to this {@link YOURLS} for chaining purposes.\n * @public\n */\nYOURLS.prototype.version = function(callback) {\n  var data = { action: 'version' }\n\n  jsonp(data, 'version', callback)\n\n  return this\n}\n\n/**\n * The singleton instance of {@link YOURLS}.\n */\nexport default new YOURLS()\n\n/**\n * Contains additional information which can be used when shortening a URL.\n *\n * If <code>keyword</code> is specified, it must be available and, if not, the YOURLS server will generate a unique\n * keyword.\n *\n * @typedef {Object} YOURLS~Descriptor\n * @property {string} [keyword] - The optional keyword to be used for the shortened URL.\n * @property {string} [title] - The optional title to be associated with the shortened URL.\n */\n"],"names":["sanitizeCredentials","credentials","result","signature","timestamp","password","username","API","url","this","replace","paramify","params","results","key","Object","prototype","hasOwnProperty","call","push","encodeURIComponent","join","generateCallbackId","id","Date","now","callbackHolder","getResult","names","response","toString","i","name","length","jsonp","data","resultNames","callback","api","fetch","script","document","createElement","parentNode","removeChild","target","callbackHolderKey","format","setAttribute","getElementsByTagName","appendChild","DB","URL","instance","clear","store","window","stats","action","expand","shorturl","YOURLS","db","VERSION","connect","disconnect","shorten","descriptor","keyword","title","filter","limit","version"],"mappings":"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"}